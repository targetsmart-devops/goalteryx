package goalteryx

import (
	"encoding/base64"
	"github.com/billgraziano/dpapi"
	"testing"
)

func TestDecrypt(t *testing.T) {

	data := ``
	raw, err := base64.StdEncoding.DecodeString(data)
	if err != nil {
		t.Fatalf(err.Error())
	}

	decrypted, err := dpapi.DecryptBytes(raw)
	if err != nil {
		t.Fatalf(err.Error())
	}
	t.Logf(string(decrypted))
}
